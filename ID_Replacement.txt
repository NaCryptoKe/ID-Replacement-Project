D:\ID_Replacement
│   Database.sql
│   Program.cs
│   LoginForm.cs
│   MainFrame.cs
│
├───bin
│   └───Debug
│       ├───net8.0-windows
│       ├───net8.0-windows7.0
│       ├───net9.0-windows
│
├───Data
│   │   DatabaseContext.cs
│   │
│   ├───Models
│   │   │   Appointment.cs
│   │   │   Document.cs
│   │   │   IDRequest.cs
│   │   │   Student.cs
│   │   │   TransactionLog.cs
│   │
│   ├───Repositories
│   │   ├───Class
│   │   │   │   AppointmentRepository.cs
│   │   │   │   DocumentRepository.cs
│   │   │   │   IDRequestRepository.cs
│   │   │   │   StudentRepository.cs
│   │   │   │   TransactionLogRepository.cs
│   │   │
│   │   ├───Interface
│   │   │   │   IAppointmentRepository.cs
│   │   │   │   IDocumentRepository.cs
│   │   │   │   IIDRequestRepository.cs
│   │   │   │   IStudentRepository.cs
│   │   │   │   ITransactionLogRepository.cs
│
├───Services
│   ├───Class
│   │   │   AppointmentService.cs
│   │   │   DocumentService.cs
│   │   │   IDRequestService.cs
│   │   │   StudentService.cs
│   │   │   TransactionLogService.cs
│   │
│   ├───Interface
│   │   │   IAppointmentService.cs
│   │   │   IDocumentService.cs
│   │   │   IIDRequestService.cs
│   │   │   IStudentService.cs
│   │   │   ITransactionLogService.cs


Student.cs
"namespace ID_Replacement.Data.Models
{
    public class Student
    {
        public string StudentID { get; set; }
        public string FullName { get; set; }
        public string Department { get; set; }
        public int Year { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}"

StudentService.cs
"using ID_Replacement.Data.Models;
using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Services.Interface;

namespace ID_Replacement.Services
{
    public class StudentService : IStudentService
    {
        private readonly IStudentRepository _studentRepository;

        public StudentService(IStudentRepository studentRepository)
        {
            _studentRepository = studentRepository;
        }

        public Student GetStudentById(string studentId)
        {
            return _studentRepository.GetStudentById(studentId);
        }

        public bool ValidateCredentials(string username, string password)
        {
            return _studentRepository.ValidateCredentials(username, password);
        }
    }
}"

IStudentService.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface IStudentService
    {
        Student GetStudentById(string studentId);
        bool ValidateCredentials(string username, string password);
    }
}"

StudentRepository.cs
"using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class StudentRepository : IStudentRepository
    {
        private readonly string _connectionString;

        public StudentRepository(string connectionString)
        {
            _connectionString = connectionString;
        }

        public Student GetStudentById(string studentId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = "SELECT StudentID, FullName FROM Students WHERE StudentID = @StudentID";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StudentID", studentId);
                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Student
                            {
                                StudentID = reader["StudentID"].ToString(),
                                FullName = reader["FullName"].ToString()
                            };
                        }
                    }
                }
            }
            return null;
        }

        public bool ValidateCredentials(string username, string password)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"SELECT StudentID FROM Students 
                              WHERE (Email = @username OR StudentID = @username) 
                              AND Password = @password";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@username", username);
                    command.Parameters.AddWithValue("@password", password);
                    return command.ExecuteScalar() != null;
                }
            }
        }
    }
}"

IStudentRepository.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface IStudentRepository
    {
        Student GetStudentById(string studentId);
        bool ValidateCredentials(string username, string password);
    }
}"

IAppointmentService.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface IAppointmentService
    {
        Appointment GetAppointmentById(int appointmentId);
        IEnumerable<Appointment> GetAppointmentsByRequestId(int requestId);
        void ScheduleAppointment(Appointment appointment);
        void RescheduleAppointment(int appointmentId, DateTime newDate);
    }
}
"
AppointmentService.cs
"using ID_Replacement.Data.Models;
using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Services.Interface;

namespace ID_Replacement.Services
{
    public class AppointmentService : IAppointmentService
    {
        private readonly IAppointmentRepository _repository;

        public AppointmentService(IAppointmentRepository repository)
        {
            _repository = repository;
        }

        public Appointment GetAppointmentById(int appointmentId)
        {
            return _repository.GetAppointmentById(appointmentId);
        }

        public IEnumerable<Appointment> GetAppointmentsByRequestId(int requestId)
        {
            return _repository.GetAppointmentsByRequestId(requestId);
        }

        public void ScheduleAppointment(Appointment appointment)
        {
            _repository.AddAppointment(appointment);
        }

        public void RescheduleAppointment(int appointmentId, DateTime newDate)
        {
            _repository.UpdateAppointmentDate(appointmentId, newDate);
        }
    }
}
"
IAppointmentRepository.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface IAppointmentRepository
    {
        Appointment GetAppointmentById(int appointmentId);
        IEnumerable<Appointment> GetAppointmentsByRequestId(int requestId);
        void AddAppointment(Appointment appointment);
        void UpdateAppointmentDate(int appointmentId, DateTime newDate);
    }
}

"
AppointmentRepository.cs
"using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class AppointmentRepository : IAppointmentRepository
    {
        public Appointment GetAppointmentById(int appointmentId)
        {
            // Implementation to fetch an appointment by ID.
            return null;
        }

        public IEnumerable<Appointment> GetAppointmentsByRequestId(int requestId)
        {
            // Implementation to fetch all appointments by request ID.
            return null;
        }

        public void AddAppointment(Appointment appointment)
        {
            // Implementation to add a new appointment.
        }

        public void UpdateAppointmentDate(int appointmentId, DateTime newDate)
        {
            // Implementation to update the appointment date.
        }
    }
}
"
Appointment.cs
"namespace ID_Replacement.Data.Models
{
    public class Appointment
    {
        public int AppointmentID { get; set; }
        public int RequestID { get; set; }
        public DateTime AppointmentDate { get; set; }
    }
}"
IDocumentService.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface IDocumentService
    {
        Document GetDocumentById(int documentId);
        IEnumerable<Document> GetDocumentsByRequestId(int requestId);
        void CreateDocument(Document document);
    }
}
"
DocumentService.cs
"using ID_Replacement.Data.Models;
using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Services.Interface;

namespace ID_Replacement.Services
{
    public class DocumentService : IDocumentService
    {
        private readonly IDocumentRepository _repository;

        public DocumentService(IDocumentRepository repository)
        {
            _repository = repository;
        }

        public Document GetDocumentById(int documentId)
        {
            return _repository.GetDocumentById(documentId);
        }

        public IEnumerable<Document> GetDocumentsByRequestId(int requestId)
        {
            return _repository.GetDocumentsByRequestId(requestId);
        }

        public void CreateDocument(Document document)
        {
            _repository.AddDocument(document);
        }
    }
}
"
IDocumentRepository.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface IDocumentRepository
    {
        Document GetDocumentById(int documentId);
        IEnumerable<Document> GetDocumentsByRequestId(int requestId);
        void AddDocument(Document document);
    }
}
"
DocumentRepository.cs
"using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class DocumentRepository : IDocumentRepository
    {
        public Document GetDocumentById(int documentId)
        {
            // Implementation to fetch document by ID.
            return null;
        }

        public IEnumerable<Document> GetDocumentsByRequestId(int requestId)
        {
            // Implementation to fetch documents by request ID.
            return null;
        }

        public void AddDocument(Document document)
        {
            // Implementation to add a new document.
        }
    }
}
"
Document.cs
"namespace ID_Replacement.Data.Models
{
    public class Document
    {
        public int DocumentID { get; set; }
        public int RequestID { get; set; }
        public string DocumentPath { get; set; }
        public DateTime UploadDate { get; set; }
    }
}"
IIDRequestService.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface IIDRequestService
    {
        IDRequest GetRequestById(int requestId);
        IEnumerable<IDRequest> GetRequestsByStudentId(string studentId);
        void CreateRequest(IDRequest request);
        void UpdateRequestStatus(int requestId, string status);
    }
}
"
IDRequestService.cs
"using ID_Replacement.Data.Models;
using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Services.Interface;

namespace ID_Replacement.Services
{
    public class IDRequestService : IIDRequestService
    {
        private readonly IIDRequestRepository _repository;

        public IDRequestService(IIDRequestRepository repository)
        {
            _repository = repository;
        }

        public IDRequest GetRequestById(int requestId)
        {
            return _repository.GetRequestById(requestId);
        }

        public IEnumerable<IDRequest> GetRequestsByStudentId(string studentId)
        {
            return _repository.GetRequestsByStudentId(studentId);
        }

        public void CreateRequest(IDRequest request)
        {
            _repository.AddRequest(request);
        }

        public void UpdateRequestStatus(int requestId, string status)
        {
            _repository.UpdateRequestStatus(requestId, status);
        }
    }
}
"
IIDRequestRepository.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface IIDRequestRepository
    {
        IDRequest GetRequestById(int requestId);
        IEnumerable<IDRequest> GetRequestsByStudentId(string studentId);
        void AddRequest(IDRequest request);
        void UpdateRequestStatus(int requestId, string status);
    }
}
"
IDRequestRepository.cs
"using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class IDRequestRepository : IIDRequestRepository
    {
        public IDRequest GetRequestById(int requestId)
        {
            // Implementation to fetch request by ID.
            return null;
        }

        public IEnumerable<IDRequest> GetRequestsByStudentId(string studentId)
        {
            // Implementation to fetch all requests by StudentID.
            return null;
        }

        public void AddRequest(IDRequest request)
        {
            // Implementation to add a new ID request.
        }

        public void UpdateRequestStatus(int requestId, string status)
        {
            // Implementation to update the status of a request.
        }
    }
}
"
IDRequest.cs
"namespace ID_Replacement.Data.Models
{
    public class IDRequest
    {
        public int RequestID { get; set; }
        public string StudentID { get; set; }
        public DateTime RequestDate { get; set; }
        public string Status { get; set; }
        public bool NotificationSent { get; set; }
    }
}"
ITransactionLogService.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface ITransactionLogService
    {
        TransactionLog GetLogById(int logId);
        IEnumerable<TransactionLog> GetLogsByTableName(string tableName);
        void LogTransaction(TransactionLog log);
    }
}
"
TransactionLogService.cs
"using ID_Replacement.Data.Models;
using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Services.Interface;

namespace ID_Replacement.Services
{
    public class TransactionLogService : ITransactionLogService
    {
        private readonly ITransactionLogRepository _repository;

        public TransactionLogService(ITransactionLogRepository repository)
        {
            _repository = repository;
        }

        public TransactionLog GetLogById(int logId)
        {
            return _repository.GetLogById(logId);
        }

        public IEnumerable<TransactionLog> GetLogsByTableName(string tableName)
        {
            return _repository.GetLogsByTableName(tableName);
        }

        public void LogTransaction(TransactionLog log)
        {
            _repository.AddLog(log);
        }
    }
}
"
ITransactionLogRepository.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface ITransactionLogRepository
    {
        TransactionLog GetLogById(int logId);
        IEnumerable<TransactionLog> GetLogsByTableName(string tableName);
        void AddLog(TransactionLog log);
    }
}
"
TransactionLogRepository.cs
"using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class TransactionLogRepository : ITransactionLogRepository
    {
        public TransactionLog GetLogById(int logId)
        {
            // Implementation to fetch a log by ID.
            return null;
        }

        public IEnumerable<TransactionLog> GetLogsByTableName(string tableName)
        {
            // Implementation to fetch logs by table name.
            return null;
        }

        public void AddLog(TransactionLog log)
        {
            // Implementation to add a new transaction log.
        }
    }
}
"
TransactionLog.cs
"namespace ID_Replacement.Data.Models
{
    public class TransactionLog
    {
        public int LogID { get; set; }
        public string TableName { get; set; }
        public string Operation { get; set; }
        public DateTime ChangeDate { get; set; }
        public string Details { get; set; }
        public string UserID { get; set; }
    }
}"
DatabaseContext.cs
"using Microsoft.Data.SqlClient;

namespace ID_Replacement.Data
{
    /*
     *This class is public because it's intended to be used through out the project
     *This is a sealed class, which basically means you can't inherit from this class because we don't want it to be overriden by being inherited
     */
    public sealed class DatabaseContext
    {
        /*
         * This is a singleton implementaion for the database connection
         * Static: Shared across the application. Read-only: Can only be assigned once, ensuring the instance cannot be reassigned.
         * Lazy<T>
         * Ensures the instance is created only when it is first accessed. This is called lazy initialization.
         * Avoids unnecessary resource usage if DatabaseContext is never used during the application's lifecycle.
         * 
         * The lambda () => new DatabaseContext() specifies how the singleton instance is created: by invoking the private constructor.
         */
        private static readonly Lazy<DatabaseContext> _instance =
            new Lazy<DatabaseContext>(() => new DatabaseContext());

        private readonly string _connectionString;

        // Private constructor ensures no external instantiation
        private DatabaseContext()
        {
            _connectionString = "Data Source=QUANTUMEDGE\\SQLEXPRESS;Initial Catalog=IDRepSysstem;Integrated Security=True;Encrypt=True;Trust Server Certificate=True";
        }

        /* 
         * Public property to access the single instance
         * Singleton Instance Property
         * public: Exposed to the rest of the application.
         * static: No need to create an object; you access it using DatabaseContext.Instance.
         * Instance: Returns the singleton instance of DatabaseContext stored in _instance
         * Lazy Evaluation:
         * _instance.Value: Evaluates the Lazy<T> object and initializes DatabaseContext the first time it’s accessed.
         */
        public static DatabaseContext Instance => _instance.Value;

        // Method to get a new SqlConnection
        public SqlConnection GetConnection()
        {
            return new SqlConnection(_connectionString);
        }
    }
}"

Tables
"CREATE TABLE Students (
    StudentID VARCHAR(10) PRIMARY KEY,
    FullName NVARCHAR(100) NOT NULL,
    Department NVARCHAR(50),
    Year INT,
    Email NVARCHAR(100),
    Password NVARCHAR(25) DEFAULT 'PASSWORD123'
);

CREATE TABLE IDRequests (
    RequestID INT IDENTITY PRIMARY KEY,
    StudentID VARCHAR(10) FOREIGN KEY REFERENCES Students(StudentID), -- Fixed to match Students.StudentID
    RequestDate DATETIME DEFAULT GETDATE(),
    Status NVARCHAR(20) CHECK (Status IN ('Pending', 'Approved', 'Rejected', 'Completed')),
    NotificationSent BIT DEFAULT 0
);

CREATE TABLE Documents (
    DocumentID INT IDENTITY PRIMARY KEY,
    RequestID INT FOREIGN KEY REFERENCES IDRequests(RequestID),
    DocumentPath NVARCHAR(255) NOT NULL,
    UploadDate DATETIME DEFAULT GETDATE()
);

CREATE TABLE Appointments (
    AppointmentID INT IDENTITY PRIMARY KEY,
    RequestID INT FOREIGN KEY REFERENCES IDRequests(RequestID),
    AppointmentDate DATETIME NOT NULL
);

CREATE TABLE TransactionLogs (
    LogID INT IDENTITY PRIMARY KEY,
    TableName NVARCHAR(50),
    Operation NVARCHAR(50),
    ChangeDate DATETIME DEFAULT GETDATE(),
    Details NVARCHAR(MAX),
    UserID NVARCHAR(50)
);
GO
"
LoginForm.cs
"using System;
using System.Windows.Forms;
using ID_Replacement.Services.Interface;

namespace ID_Replacement
{
    public partial class LoginForm : Form
    {
        private readonly IStudentService _studentService;

        public LoginForm(IStudentService studentService)
        {
            InitializeComponent();
            _studentService = studentService;
        }

        private void btnLogin_Click(object sender, EventArgs e)
        {
            string username = txtUsername.Text.Trim();
            string password = txtPassword.Text.Trim();

            try
            {
                if (_studentService.ValidateCredentials(username, password))
                {
                    var student = _studentService.GetStudentById(username);
                    if (student != null)
                    {
                        this.Hide();
                        new MainFrame(student).ShowDialog(); // Pass student object
                        this.Close();
                    }
                    else
                    {
                        MessageBox.Show("Error retrieving student details.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    MessageBox.Show("Invalid credentials.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Login failed: {ex.Message}");
            }
        }
    }
}
"
LoginForm.Designer.cs
"namespace ID_Replacement
{
    partial class LoginForm
    {
        private System.ComponentModel.IContainer components = null;
        private TextBox txtUsername;
        private TextBox txtPassword;
        private Button btnLogin;
        private Label lblUsername;
        private Label lblPassword;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.txtUsername = new System.Windows.Forms.TextBox();
            this.txtPassword = new System.Windows.Forms.TextBox();
            this.btnLogin = new System.Windows.Forms.Button();
            this.lblUsername = new System.Windows.Forms.Label();
            this.lblPassword = new System.Windows.Forms.Label();
            this.SuspendLayout();

            // 
            // txtUsername
            // 
            this.txtUsername.Location = new System.Drawing.Point(150, 50);
            this.txtUsername.Name = "txtUsername";
            this.txtUsername.Size = new System.Drawing.Size(180, 20);
            this.txtUsername.TabIndex = 0;
            // 
            // txtPassword
            // 
            this.txtPassword.Location = new System.Drawing.Point(150, 90);
            this.txtPassword.Name = "txtPassword";
            this.txtPassword.PasswordChar = '*';
            this.txtPassword.Size = new System.Drawing.Size(180, 20);
            this.txtPassword.TabIndex = 1;
            // 
            // btnLogin
            // 
            this.btnLogin.BackColor = System.Drawing.Color.SteelBlue;
            this.btnLogin.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.btnLogin.ForeColor = System.Drawing.Color.White;
            this.btnLogin.Location = new System.Drawing.Point(150, 130);
            this.btnLogin.Name = "btnLogin";
            this.btnLogin.Size = new System.Drawing.Size(100, 30);
            this.btnLogin.TabIndex = 2;
            this.btnLogin.Text = "Login";
            this.btnLogin.UseVisualStyleBackColor = false;
            this.btnLogin.Click += new System.EventHandler(this.btnLogin_Click);
            // 
            // lblUsername
            // 
            this.lblUsername.AutoSize = true;
            this.lblUsername.Location = new System.Drawing.Point(50, 53);
            this.lblUsername.Name = "lblUsername";
            this.lblUsername.Size = new System.Drawing.Size(58, 13);
            this.lblUsername.TabIndex = 3;
            this.lblUsername.Text = "Username:";
            // 
            // lblPassword
            // 
            this.lblPassword.AutoSize = true;
            this.lblPassword.Location = new System.Drawing.Point(50, 93);
            this.lblPassword.Name = "lblPassword";
            this.lblPassword.Size = new System.Drawing.Size(56, 13);
            this.lblPassword.TabIndex = 4;
            this.lblPassword.Text = "Password:";
            // 
            // LoginForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.BackColor = System.Drawing.Color.White;
            this.ClientSize = new System.Drawing.Size(400, 200);
            this.Controls.Add(this.lblPassword);
            this.Controls.Add(this.lblUsername);
            this.Controls.Add(this.btnLogin);
            this.Controls.Add(this.txtPassword);
            this.Controls.Add(this.txtUsername);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "LoginForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "ID Replacement System - Login";
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
}"
MainFrame.cs
"using System;
using System.Windows.Forms;
using ID_Replacement.Data.Models;

namespace ID_Replacement
{
    public partial class MainFrame : Form
    {
        private readonly Student _loggedInStudent;

        public MainFrame(Student student)
        {
            InitializeComponent();
            _loggedInStudent = student;
        }
    }
}
"
MainFrame.Designer.cs
"namespace ID_Replacement
{
    partial class MainFrame
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "MainFrame";
        }

        #endregion
    }
}"