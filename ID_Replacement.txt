ID_Replacement/
├── Data/
│   ├── Models/
│   │   ├── Student.cs
│   │   ├── IDRequest.cs
│   │   ├── Document.cs
│   │   ├── Appointment.cs
│   │   └── TransactionLog.cs
│   ├── Repositories/
│   │   ├── IStudentRepository.cs
│   │   ├── StudentRepository.cs
│   │   ├── IIDRequestRepository.cs
│   │   ├── IDRequestRepository.cs
│   │   └── (Other repositories for Documents, Appointments, etc.)
│   └── DatabaseContext.cs
├── Services/
│   ├── IStudentService.cs
│   ├── StudentService.cs
│   ├── IIDRequestService.cs
│   ├── IDRequestService.cs
│   └── (Other services for Documents, Appointments, etc.)
├── LoginForm.cs
├── AdminForm.cs
├── MainFrame.cs
├── Utilities/
│   ├── GlobalVariables.cs
│   └── Helpers.cs
├── App.config
├── Program.cs
└── README.md

Student.cs
"namespace ID_Replacement.Data.Models
{
    public class Student
    {
        public string StudentID { get; set; }
        public string FullName { get; set; }
        public string Department { get; set; }
        public int Year { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}"

StudentService.cs
"using ID_Replacement.Data.Models;
using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Services.Interface;

namespace ID_Replacement.Services
{
    public class StudentService : IStudentService
    {
        private readonly IStudentRepository _studentRepository;

        public StudentService(IStudentRepository studentRepository)
        {
            _studentRepository = studentRepository;
        }

        public Student GetStudentById(string studentId)
        {
            return _studentRepository.GetStudentById(studentId);
        }

        public bool ValidateCredentials(string username, string password)
        {
            return _studentRepository.ValidateCredentials(username, password);
        }
    }
}"

IStudentService.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface IStudentService
    {
        Student GetStudentById(string studentId);
        bool ValidateCredentials(string username, string password);
    }
}"

StudentRepository.cs
"using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class StudentRepository : IStudentRepository
    {
        private readonly string _connectionString;

        public StudentRepository(string connectionString)
        {
            _connectionString = connectionString;
        }

        public Student GetStudentById(string studentId)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = "SELECT StudentID, FullName FROM Students WHERE StudentID = @StudentID";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@StudentID", studentId);
                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Student
                            {
                                StudentID = reader["StudentID"].ToString(),
                                FullName = reader["FullName"].ToString()
                            };
                        }
                    }
                }
            }
            return null;
        }

        public bool ValidateCredentials(string username, string password)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                var query = @"SELECT StudentID FROM Students 
                              WHERE (Email = @username OR StudentID = @username) 
                              AND Password = @password";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@username", username);
                    command.Parameters.AddWithValue("@password", password);
                    return command.ExecuteScalar() != null;
                }
            }
        }
    }
}"

IStudentRepository.cs
"using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface IStudentRepository
    {
        Student GetStudentById(string studentId);
        bool ValidateCredentials(string username, string password);
    }
}"
