namespace ID_Replacement.Data.Models
{
    public class AdminViewModel
    {
        public string StudentID { get; set; }
        public string FullName { get; set; }
        public DateTime AppointmentDate { get; set; }
        public string Status { get; set; }
    }
}

using ID_Replacement.Data.Models;

namespace ID_Replacement.Services.Interface
{
    public interface IAdminViewModelService
    {
        IEnumerable<AdminViewModel> GetAllStudents();
    }
}

using ID_Replacement.Data.Repositories.Interface;
using ID_Replacement.Data.Models;
using ID_Replacement.Services.Interface;
using ID_Replacement.Data.Repositories.Class;

namespace ID_Replacement.Services.Class
{
    public class AdminViewModelService : IAdminViewModelService
    {
        private readonly IAdminViewModelRepository _adminViewModelRepository;
        public AdminViewModelService(IAdminViewModelRepository adminViewModelRepository)
        {
            _adminViewModelRepository = adminViewModelRepository;
        }
        public IEnumerable<AdminViewModel> GetAllStudents()
        {
            return _adminViewModelRepository.GetAllStudents();
        }
    }
}


using ID_Replacement.Data.Models;

namespace ID_Replacement.Data.Repositories.Interface
{
    public interface IAdminViewModelRepository
    {
        IEnumerable<AdminViewModel> GetAllStudents();
    }
}

using ID_Replacement.Data.Models;
using Microsoft.Data.SqlClient;
using ID_Replacement.Data.Repositories.Interface;

namespace ID_Replacement.Data.Repositories.Class
{
    public class AdminViewModelRepository : IAdminViewModelRepository
    {
        public IEnumerable<AdminViewModel> GetAllStudents()
        {
            var adminViewModel = new List<AdminViewModel>();
            using (var connection = DatabaseContext.Instance.GetConnection())
            {
                connection.Open();
                var query = "SELECT * FROM StudentAppointments";
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        adminViewModel.Add(new AdminViewModel
                        {
                            StudentID = reader.GetString(reader.GetOrdinal("StudentID")),
                            FullName = reader.GetString(reader.GetOrdinal("FullName")),
                            AppointmentDate = reader.GetDateTime(reader.GetOrdinal("AppointmentDate")),
                            Status = reader.GetString(reader.GetOrdinal("Status"))
                        });

                    }
                }
            }
            return adminViewModel; ;
        }
    }
}

Admin.cs
using System;
using System.Collections.Generic;
using System.Linq;

namespace ID_Replacement
{
    public class Admin
    {
        public class Request
        {
            public string FullName { get; set; }
            public string UserId { get; set; }
            public DateTime ScheduledDate { get; set; }
            public string Remarks { get; set; }
            public string FilePath { get; set; }
            public string Facts { get; set; }
            public RequestStatus Status { get; set; }
        }

        public enum RequestStatus
        {
            Pending,
            Accepted,
            Denied
        }

        private List<Request> _requests;

        public Admin()
        {
            _requests = new List<Request>();
            InitializeSampleData();
        }

        private void InitializeSampleData()
        {
            _requests.Add(new Request
            {
                FullName = "John Doe",
                UserId = "JD123",
                Facts = "Senior Developer, 5 years experience",
                Status = RequestStatus.Pending,
                ScheduledDate = DateTime.Now.AddDays(5),
                Remarks = "Urgent review needed",
                FilePath = @"C:\Documents\JohnDoe_Resume.pdf"
            });

            _requests.Add(new Request
            {
                FullName = "Jane Smith",
                UserId = "JS456",
                Facts = "Project Manager, Certified PMP",
                Status = RequestStatus.Pending,
                ScheduledDate = DateTime.Now.AddDays(3),
                Remarks = "Priority candidate",
                FilePath = @"C:\Documents\JaneSmith_Portfolio.pdf"
            });
        }

        public List<Request> GetPendingRequests()
        {
            return _requests.Where(r => r.Status == RequestStatus.Pending).ToList();
        }

        public List<Request> GetCompletedRequests()
        {
            return _requests.Where(r => r.Status != RequestStatus.Pending).ToList();
        }

        public bool AcceptRequest(string userId)
        {
            var request = _requests.FirstOrDefault(r => r.UserId == userId);
            if (request != null && request.Status == RequestStatus.Pending)
            {
                request.Status = RequestStatus.Accepted;
                return true;
            }
            return false;
        }

        public bool DenyRequest(string userId)
        {
            var request = _requests.FirstOrDefault(r => r.UserId == userId);
            if (request != null && request.Status == RequestStatus.Pending)
            {
                request.Status = RequestStatus.Denied;
                return true;
            }
            return false;
        }

        public Request GetRequestDetails(string userId)
        {
            return _requests.FirstOrDefault(r => r.UserId == userId);
        }

        public void AddRequest(string fullName, string userId, string facts, DateTime scheduledDate, string remarks, string filePath)
        {
            _requests.Add(new Request
            {
                FullName = fullName,
                UserId = userId,
                Facts = facts,
                ScheduledDate = scheduledDate,
                Remarks = remarks,
                FilePath = filePath,
                Status = RequestStatus.Pending
            });
        }

        public bool DeleteRequest(string userId)
        {
            var request = _requests.FirstOrDefault(r => r.UserId == userId);
            if (request != null)
            {
                _requests.Remove(request);
                return true;
            }
            return false;
        }
    }
}

AdminForm.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace ID_Replacement
{
    public partial class AdminForm : Form
    {
        private Admin _admin;

        public AdminForm()
        {
            InitializeComponent();
            _admin = new Admin();
            LoadPendingRequests();
        }

        private void LoadPendingRequests()
        {
            var pendingRequests = _admin.GetPendingRequests();
            requestsListBox.Items.Clear();
            foreach (var request in pendingRequests)
            {
                requestsListBox.Items.Add($"{request.FullName} - {request.UserId} - {request.ScheduledDate.ToShortDateString()}");
            }
        }

        private void viewButton_Click(object sender, EventArgs e)
        {
            if (requestsListBox.SelectedItem != null)
            {
                var selectedRequest = requestsListBox.SelectedItem.ToString().Split(" - ")[1];
                var requestDetails = _admin.GetRequestDetails(selectedRequest);

                if (requestDetails != null)
                {
                    detailsTextBox.Text = $"Full Name: {requestDetails.FullName}\n" +
                                          $"User ID: {requestDetails.UserId}\n" +
                                          $"Scheduled Date: {requestDetails.ScheduledDate}\n" +
                                          $"Remarks: {requestDetails.Remarks}\n" +
                                          $"Facts: {requestDetails.Facts}\n" +
                                          $"File Path: {requestDetails.FilePath}\n" +
                                          $"Status: {requestDetails.Status}";
                }
                else
                {
                    MessageBox.Show("Request not found.");
                }
            }
        }

        private void acceptButton_Click(object sender, EventArgs e)
        {
            if (requestsListBox.SelectedItem != null)
            {
                var selectedRequest = requestsListBox.SelectedItem.ToString().Split(" - ")[1];

                if (_admin.AcceptRequest(selectedRequest))
                {
                    MessageBox.Show("Request Accepted.");
                    LoadPendingRequests();
                }
                else
                {
                    MessageBox.Show("Request already processed or not found.");
                }
            }
        }

        private void denyButton_Click(object sender, EventArgs e)
        {
            if (requestsListBox.SelectedItem != null)
            {
                var selectedRequest = requestsListBox.SelectedItem.ToString().Split(" - ")[1];

                if (_admin.DenyRequest(selectedRequest))
                {
                    MessageBox.Show("Request Denied.");
                    LoadPendingRequests();
                }
                else
                {
                    MessageBox.Show("Request already processed or not found.");
                }
            }
        }

        private void addButton_Click(object sender, EventArgs e)
        {
            var addRequestForm = new AddRequestForm(_admin);
            addRequestForm.ShowDialog();
            LoadPendingRequests();
        }

        private void deleteButton_Click(object sender, EventArgs e)
        {
            if (requestsListBox.SelectedItem != null)
            {
                var selectedRequest = requestsListBox.SelectedItem.ToString().Split(" - ")[1];

                if (_admin.DeleteRequest(selectedRequest))
                {
                    MessageBox.Show("Request Deleted.");
                    LoadPendingRequests();
                }
                else
                {
                    MessageBox.Show("Request not found.");
                }
            }
        }
    }
}
